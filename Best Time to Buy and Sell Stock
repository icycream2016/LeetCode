class Solution(object):
    def maxProfit(self, prices):
        """
        :type prices: List[int]
        :rtype: int
给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。

如果你最多只允许完成一笔交易（即买入和卖出一支股票），设计一个算法来计算你所能获取的最大利润。

注意你不能在买入股票前卖出股票。

示例 1:

输入: [7,1,5,3,6,4]
输出: 5
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
     注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格。
示例 2:

输入: [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。

        从前向后遍历，记录价格最小值和收益最大值
        如果当前价格减去最小值(即收益)大于记录的收益，则更新收益
        如果当前价格小于最小价格，则更新最小价格
        """
        import sys
        l=len(prices)
        r=0
        m=sys.maxint
        i=0
        while(i<l):
            if(prices[i]-m>r):
                r=prices[i]-m
            if(prices[i]<m):
                m=prices[i]
            i+=1
        return r
